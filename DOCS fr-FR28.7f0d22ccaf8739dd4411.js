(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[166],{

/***/ 800:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.prod.js
var vue_esm_browser_prod = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/fr-FR/i18n.md?vue&type=template&id=39036866

var _hoisted_1 = {
  class: "content element-doc"
};

var _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser_prod["n" /* createStaticVNode */])("<h2 id=\"internationalisation\"><a class=\"header-anchor\" href=\"#internationalisation\">Â¶</a> Internationalisation</h2><p>La langue par dÃ©faut d&#39;Element Plus est le Anglais. Si vous souhaitez utiliser une autre langue, il vous faudra la configurer. Par exemple, dans votre fichier d&#39;entrÃ©e:</p><p>The default locale of Element Plus is English. If you want to use another language, you&#39;ll need to do some i18n configuration. In your entry file:</p><div class=\"warning\"><p>We have made breaking changes after <strong>1.0.2-beta.59(included)</strong>, please keep reading for more informationï¼Œthis documentation <strong>does not apply to version before 1.0.2-beta.58(included)</strong></p></div><h3 id=\"1.0.2-beta.59-included\"><a class=\"header-anchor\" href=\"#1.0.2-beta.59-included\">Â¶</a> 1.0.2-beta.59(included)ï¼š</h3><p>After <code>1.0.2-beta.59(included)</code>, we reorganized the code, making sure i18n functionalities can be applied seamlessly for both full bundle &amp; on demand usage.</p><h4 id=\"1.-via-configprovider\"><a class=\"header-anchor\" href=\"#1.-via-configprovider\">Â¶</a> 1. Via ConfigProvider</h4><p>If your project is still using <code>Options API</code>, then we suggest you to use it this way, to reduce the mind burden. If you are using <code>Composition API</code> throughout your project, we still suggest you to use it this way since this allows you to write less code.</p><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-config-provider</span> <span class=\"hljs-attr\">:locale</span>=<span class=\"hljs-string\">&quot;locale&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-config-provider</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ConfigProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n\n<span class=\"hljs-keyword\">import</span> en <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/en&#39;</span>\n\ndefineComponent({\n  <span class=\"hljs-attr\">components</span>: {\n    [ConfigProvider.name]: ConfigProvider,\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">locale</span>: en,\n    }\n  },\n})\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><h4 id=\"useful-links\"><a class=\"header-anchor\" href=\"#useful-links\">Â¶</a> Useful linksï¼š</h4><ul><li><p><a href=\"https://github.com/element-plus/element-plus/tree/dev/packages/locale/lang\">Supported languages</a></p></li><li><p><a href=\"#/fr/component/config-provider\">ConfigProvider Documentation</a></p></li></ul><h4 id=\"2.-via-composable-hook\"><a class=\"header-anchor\" href=\"#2.-via-composable-hook\">Â¶</a> 2. Via Composable hook</h4><p>Using this way is basically implementing a <a href=\"https://element-plus.org/#/en-US/component/config-provider\">ConfigProvider</a> on your own to inject configurations.</p><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { useLocale, useLocaleProps } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n<span class=\"hljs-comment\">// Locale Wrapper entry</span>\n<span class=\"hljs-keyword\">const</span> Provider = defineComponent({\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-comment\">// If you want language switching feature, you need to add these props</span>\n    <span class=\"hljs-comment\">// into your Provider</span>\n    ...useLocaleProps,\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">// No parameters needed, but the props above is required</span>\n    <span class=\"hljs-comment\">// ` { locale?: Language, i18n?: (...args: any[]) =&gt; string }`</span>\n    useLocale()\n  }\n})\n\n\ncreateApp(\n  {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n      &lt;provider :locale=&quot;locale&quot; :i18n=&quot;i18n&quot;&gt;\n        &lt;App /&gt;\n      &lt;/provider&gt;\n    `</span>\n  }\n)\n\n</code></pre><h3 id=\"set-day.js-locale\"><a class=\"header-anchor\" href=\"#set-day.js-locale\">Â¶</a> Set Day.js locale</h3><p>Element Plus use date time locale (month name, first day of the week ...) from <a href=\"https://day.js.org/\">Day.js</a> directlly. And will set the global Day.js locale automaticatlly after the locale file is loaded.</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/fr&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/fr&#39;</span>\n\n<span class=\"hljs-comment\">// will auto set Day.js locale to &#39;fr&#39;</span>\napp.use(ElementPlus, { locale })\n</code></pre><p>However, you can use another Day.js locale if needed.</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;dayjs/locale/es&#39;</span>\ndayjs.locale(<span class=\"hljs-string\">&#39;es&#39;</span>)\n</code></pre><p>La pack de la langue Anglais est importÃ© par dÃ©faut, mÃªme si vous configurez une autre langue. En utilisant le <code>NormalModuleReplacementPlugin</code> fournit par webpack vous pouvez remplacer la locale par dÃ©faut:</p><p>webpack.config.js</p><pre><code class=\"hljs language-typescript\">{\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.NormalModuleReplacementPlugin(\n      <span class=\"hljs-regexp\">/element-plus[\\/\\\\]lib[\\/\\\\]locale[\\/\\\\]lang[\\/\\\\]en/</span>,\n      <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/fr&#39;</span>,\n    ),\n  ]\n}\n</code></pre><h3 id=\"compatible-avec-vue-i18n-9.x\"><a class=\"header-anchor\" href=\"#compatible-avec-vue-i18n-9.x\">Â¶</a> Compatible avec <code>vue-i18n@9.x</code></h3><p>Element Plus est compatible avec <a href=\"https://vue-i18n-next.intlify.dev/guide/#html\">vue-i18n@9.x</a>, ce qui rend le changement de langue encore plus simple.</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { createI18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-i18n&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementPlus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>\n\n<span class=\"hljs-keyword\">const</span> messages = {\n  [enLocale.name]: {\n    <span class=\"hljs-comment\">// el property is critical, set this in order for ElementPlus translate strings correctly.</span>\n    <span class=\"hljs-attr\">el</span>: enLocale.el,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n    <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n    },\n  },\n  [zhLocale.name]: {\n    <span class=\"hljs-attr\">el</span>: zhLocale.el,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n    <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;ä½ å¥½ï¼Œä¸–ç•Œ&#39;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">testLocale</span>: {\n    <span class=\"hljs-attr\">el</span>: {},\n    <span class=\"hljs-comment\">// No message translations, it will fallback to en lang, the definition of fallbackLocale is below ðŸ‘‡</span>\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> i18n = createI18n({\n  <span class=\"hljs-attr\">locale</span>: zhLocale.name,\n  <span class=\"hljs-attr\">fallbackLocale</span>: enLocale.name,\n  messages,\n})\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\n\napp.use(ElementPlus, {\n  <span class=\"hljs-attr\">i18n</span>: i18n.global.t,\n})\n\n<span class=\"hljs-comment\">// Remember to use this plugin.</span>\napp.use(i18n)\n</code></pre><h3 id=\"compatible-avec-d-autres-plugins-i18n\"><a class=\"header-anchor\" href=\"#compatible-avec-d-autres-plugins-i18n\">Â¶</a> Compatible avec d&#39;autres plugins i18n</h3><p>Element Plus n&#39;est pas forcÃ©ment compatible avec d&#39;autres plugins i18n que vue-i18n, mais vous pouvez configurer le fonctionnement i18n.</p><div class=\"tip\"><p>Once you set this method, the internal translation function will be invalid, only the customized translation method will be used, be sure that your custom translation method can translate format like <code>el.scope.subName</code>, other wise the internal translation string will be raw string.</p></div><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementPlus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/zh-cn&#39;</span>\n\n<span class=\"hljs-comment\">// The is the signature of i18n method.</span>\n<span class=\"hljs-keyword\">type</span> i18n = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args: <span class=\"hljs-built_in\">any</span>[]</span>) =&gt;</span> <span class=\"hljs-built_in\">string</span>\nVue.use(Element, {\n  <span class=\"hljs-attr\">i18n</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">path, options</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  },\n  <span class=\"hljs-comment\">// others.</span>\n})\n</code></pre><h3 id=\"i18n-personnalisee-dans-les-composants-a-la-demande\"><a class=\"header-anchor\" href=\"#i18n-personnalisee-dans-les-composants-a-la-demande\">Â¶</a> i18n personnalisÃ©e dans les composants Ã  la demande</h3><p>Need translation</p><p>\bIf you need to know how to lazy loading translation strings, please check this out<a href=\"https://vue-i18n-next.intlify.dev/guide/advanced/lazy.html\">Lazy loading</a></p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { createI18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-i18n&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementPlus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/en&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale/lang/zh-cn&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus/lib/locale&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>\n\n<span class=\"hljs-keyword\">const</span> messages = {\n  [enLocale.name]: {\n    <span class=\"hljs-comment\">// el property is critical, set this in order for ElementPlus translate strings correctly.</span>\n    <span class=\"hljs-attr\">el</span>: enLocale.el,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n    <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n    },\n  },\n  [zhLocale.name]: {\n    <span class=\"hljs-attr\">el</span>: zhLocale.el,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n    <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;ä½ å¥½ï¼Œä¸–ç•Œ&#39;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">testLocale</span>: {\n    <span class=\"hljs-attr\">el</span>: {},\n    <span class=\"hljs-comment\">// No message translations, it will fallback to en lang, the definition of fallbackLocale is below ðŸ‘‡</span>\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> i18n = createI18n({\n  <span class=\"hljs-attr\">locale</span>: zhLocale.name,\n  <span class=\"hljs-attr\">fallbackLocale</span>: enLocale.name,\n  messages,\n})\n\nElementLocale.i18n(i18n.global.t)\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.use(i18n)\n</code></pre><h3 id=\"import-via-un-cdn\"><a class=\"header-anchor\" href=\"#import-via-un-cdn\">Â¶</a> Import via un CDN</h3><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/vue@next&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/element-plus/lib/index.full.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/element-plus/lib/umd/locale/fr.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/dayjs/locale/fr.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n  ElementPlus.locale(ElementPlus.lang.fr)\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>Compatible avec <code>vue-i18n</code></p><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/vue&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/vue-i18n/dist/vue-i18n.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/element-plus&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/element-plus/lib/umd/locale/zh-cn.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//unpkg.com/element-plus/lib/umd/locale/en.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Need translation</span>\n  <span class=\"hljs-keyword\">const</span> i18n = Vue18n.createI18n({\n    <span class=\"hljs-attr\">locale</span>: ElementPlus.lang.zhCN.name,\n    <span class=\"hljs-attr\">fallbackLocale</span>: ElementPlus.lang.en.name,\n    <span class=\"hljs-attr\">messages</span>: {\n      [ElementPlus.lang.en.name]: {\n        <span class=\"hljs-comment\">// el property is critical, set this in order for ElementPlus translate strings correctly.</span>\n        <span class=\"hljs-attr\">el</span>: ElementPlus.lang.en.el,\n        <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n        <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n        <span class=\"hljs-attr\">message</span>: {\n          <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n        },\n      },\n      [ElementPlus.lang.zhCN.name]: {\n        <span class=\"hljs-attr\">el</span>: ElementPlus.lang.zhCN.el,\n        <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `el`,</span>\n        <span class=\"hljs-comment\">// Because that makes the ElementPlus internal translation invalid.</span>\n        <span class=\"hljs-attr\">message</span>: {\n          <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;ä½ å¥½ï¼Œä¸–ç•Œ&#39;</span>,\n        },\n      },\n      <span class=\"hljs-attr\">testLocale</span>: {\n        <span class=\"hljs-attr\">el</span>: {},\n        <span class=\"hljs-comment\">// No message translations, it will fallback to en lang.</span>\n      },\n    },\n  })\n\n  <span class=\"hljs-keyword\">const</span> app = Vue.createApp()\n  app.use(i18n)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>Actuellement, Element Plus supporte les langues suivantes:</p><ul class=\"language-list\"><li>Chinois simplifiÃ© (zh-cn)</li><li>Anglais (en)</li><li>Allemand (de)</li><li>Portugais (pt)</li><li>Espagnol (es)</li><li>Danois (da)</li><li>FranÃ§ais (fr)</li><li>NorvÃ©gien (nb-no)</li><li>Chinois traditionnel (zh-tw)</li><li>Italien (it)</li><li>CorÃ©en (ko)</li><li>Japonais (ja)</li><li>NÃ©erlandais (nl)</li><li>Vietnamien (vi)</li><li>Russe (ru)</li><li>Turque (tr)</li><li>Portugais brÃ©silien (pt-br)</li><li>Farsi (fa)</li><li>ThaÃ¯ (th)</li><li>IndonÃ©sien (id)</li><li>Bulgare (bg)</li><li>Polonais (pl)</li><li>Finnois (fi)</li><li>SuÃ©dois (sv)</li><li>Grec (el)</li><li>Slovaque (sk)</li><li>Catalan (ca)</li><li>TchÃ¨que (cs)</li><li>Ukrainien (uk)</li><li>TurkmÃ¨ne (tk)</li><li>Tamoul (ta)</li><li>Letton (lv)</li><li>Afrikaans (af)</li><li>Estonien (et)</li><li>SlovÃ¨ne (sl)</li><li>Arabe (ar)</li><li>HÃ©breu (he)</li><li>Lituanien (lt)</li><li>Mongol (mn)</li><li>Kazakh (kk)</li><li>Hongrois (hu)</li><li>Roumain (ro)</li><li>Kurde (ku)</li><li>OuÃ¯ghour (ug-cn)</li><li>Khmer (km)</li><li>Serbe (sr)</li><li>Basque (eu)</li><li>Kirghize (ky)</li><li>ArmÃ©nien (hy-am)</li><li>Croate (hr)</li><li>EspÃ©ranto (eo)</li></ul><p>Si votre langue n&#39;apparaÃ®t pas dans la liste, n&#39;hÃ©sitez pas a contribuer: ajoutez simplement un fichier de configuration <a href=\"https://github.com/element-plus/element-plus/tree/dev/packages/locale/lang\">ici</a> et crÃ©ez une pull request.</p>", 40);

function render(_ctx, _cache) {
  var _component_right_nav = Object(vue_esm_browser_prod["Q" /* resolveComponent */])("right-nav");

  return Object(vue_esm_browser_prod["H" /* openBlock */])(), Object(vue_esm_browser_prod["k" /* createBlock */])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser_prod["p" /* createVNode */])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/fr-FR/i18n.md?vue&type=template&id=39036866

// CONCATENATED MODULE: ./website/docs/fr-FR/i18n.md

const script = {}
script.render = render

/* harmony default export */ var i18n = __webpack_exports__["default"] = (script);

/***/ })

}]);